import{G as c,s as i,y as n}from"./CpACWkA_.js";const l=c("user",{state:()=>({token:localStorage.getItem("token")||null,user:JSON.parse(localStorage.getItem("user"))||null,jobs:JSON.parse(localStorage.getItem("jobs"))||null}),getters:{},actions:{setToken(e){this.token=e,localStorage.setItem("token",e)},setUser(e){this.user=e,localStorage.setItem("user",JSON.stringify(e))},setJobs(e){this.jobs=e,localStorage.setItem("jobs",JSON.stringify(e))},async updateProfile(e,s,t,o){try{const{data:r}=await a("/users",{method:"PUT",body:{name:e,phone:s}});this.setUser(r),o.toastSuccess({title:t("PROFILE_UPDATED_SUCCESSFULLY"),description:t("PROFILE_UPDATED_SUCCESSFULLY_DESCRIPTION")})}catch{o.toastError({title:t("PROFILE_UPDATED_ERROR"),description:t("PROFILE_UPDATED_ERROR_DESCRIPTION")})}},async changeAvatar(e,s,t){try{const{avatar:o}=await a("/users/avatar",{method:"POST",body:e});this.user.avatar=o,localStorage.setItem("user",JSON.stringify(this.user)),t.toastSuccess({title:s("AVATAR_UPDATED_SUCCESSFULLY"),description:s("AVATAR_UPDATED_SUCCESSFULLY_DESCRIPTION")})}catch{t.toastError({title:s("AVATAR_UPDATED_ERROR"),description:s("AVATAR_UPDATED_ERROR_DESCRIPTION")})}},async changeCV(e,s,t){try{const{cv:o}=await a("/users/cv",{method:"POST",body:e});this.user.cv=o,localStorage.setItem("user",JSON.stringify(this.user)),t.toastSuccess({title:s("CV_UPDATED_SUCCESSFULLY"),description:s("CV_UPDATED_SUCCESSFULLY_DESCRIPTION")})}catch{t.toastError({title:s("CV_UPDATED_ERROR"),description:s("CV_UPDATED_ERROR_DESCRIPTION")})}},async fetchAppliedJobs(){try{const{data:e}=await a("/users/jobs?per_page=50",{method:"GET"});this.setJobs(e)}catch(e){console.log(e)}}}}),R=c("auth",{state:()=>({token:localStorage.getItem("token")||null,user:JSON.parse(localStorage.getItem("user"))||null,jobs:JSON.parse(localStorage.getItem("jobs"))||null}),getters:{isLoggedIn:e=>!!e.user,isAdmin:e=>e.user&&e.user.role==="admin",isCompany:e=>e.user&&e.user.role==="company",isUser:e=>e.user&&e.user.role==="user",userMe:e=>JSON.parse(e.user),userRole:e=>e.user?e.user.role:null},actions:{setToken(e){this.token=e,localStorage.setItem("token",e)},setUser(e){this.user=e,localStorage.setItem("user",JSON.stringify(e))},async login(e,s,t,o,r){try{const S=await a("/login",{method:"POST",body:{email:e,password:s}});switch(this.setToken(S.token),this.setUser(S.user),S.user.role){case"admin":case"company":case"user":await l().fetchAppliedJobs();default:}r.toastSuccess({title:t("LOGIN_SUCCESS"),description:t("LOGIN_SUCCESS_DESCRIPTION")}),i(o("index").fullPath)}catch{r.toastError({title:t("LOGIN_ERROR"),description:t("LOGIN_ERROR_DESCRIPTION")})}},async logout(e,s,t){this.token=null,this.user=null,this.jobs=null,localStorage.removeItem("token"),localStorage.removeItem("user"),localStorage.removeItem("jobs"),i(s({name:"login"}).fullPath),t.toastSuccess({title:e("LOGOUT_SUCCESS"),description:e("LOGOUT_SUCCESS_DESCRIPTION")})},async register(e,s,t,o){try{await a("/register",{method:"POST",body:{name:e.name,email:e.email,phone:e.phone,password:e.password,password_confirmation:e.password_confirmation,role_id:e.role==="Company"?3:2}}),o.toastSuccess({title:s("REGISTER_SUCCESS"),description:s("REGISTER_SUCCESS_DESCRIPTION")}),await this.login(e.email,e.password,s,t,o)}catch{o.toastError({title:s("REGISTER_ERROR"),description:s("REGISTER_ERROR_DESCRIPTION")})}},async fetchUser(){try{const{data:e}=await a("/users/me");this.setUser(e)}catch{this.logout()}},async updatePassword(e,s,t){try{await a("/change-password",{method:"POST",body:{current_password:e.oldPassword,new_password:e.newPassword,new_password_confirmation:e.confirmPassword}}),t.toastSuccess({title:s("PASSWORD_UPDATED_SUCCESSFULLY"),description:s("PASSWORD_UPDATED_SUCCESSFULLY_DESCRIPTION")})}catch{t.toastError({title:s("PASSWORD_UPDATED_ERROR"),description:s("PASSWORD_UPDATED_ERROR_DESCRIPTION")})}},async forgotPassword(e,s,t,o){try{await a("/forgot-password",{method:"POST",body:{email:e.email,locale:t}}),o.toastSuccess({title:s("FORGOT_PASSWORD_SUCCESS"),description:s("FORGOT_PASSWORD_SUCCESS_DESCRIPTION")})}catch{o.toastError({title:s("FORGOT_PASSWORD_ERROR"),description:s("FORGOT_PASSWORD_ERROR_DESCRIPTION")})}},async resetPassword(e,s,t,o){try{await a("/reset-password",{method:"POST",body:{email:e.email,token:e.token,password:e.password,password_confirmation:e.confirmPassword}}),o.toastSuccess({title:s("RESET_PASSWORD_SUCCESS"),description:s("RESET_PASSWORD_SUCCESS_DESCRIPTION")}),i(t({name:"login"}).fullPath)}catch{o.toastError({title:s("RESET_PASSWORD_ERROR"),description:s("RESET_PASSWORD_ERROR_DESCRIPTION")})}}}});function a(e,s={}){const t=n(),o=R(),r={...s.headers,Authorization:`Bearer ${o.token}`,Accept:"application/json",contentType:"application/json"};return $fetch(e,{baseURL:t.public.apiBaseUrl.concat(t.public.apiVersion),headers:r,...s})}export{a,l as b,R as u};
